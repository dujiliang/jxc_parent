package com.jxc.user_center.interceptor;


import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.StringUtils;
import org.springframework.stereotype.Component;
import org.springframework.web.method.HandlerMethod;
import org.springframework.web.servlet.handler.HandlerInterceptorAdapter;

import com.alibaba.fastjson.JSONObject;
import com.jxc.common.bean.R;
import com.jxc.common.constants.RedisConstantsForRegist;
import com.jxc.common.constants.RedisConstantsForUser;
import com.jxc.common.constants.SessionConstants;
import com.jxc.common.exception.RRException;
import com.jxc.common.util.HttpClientManager;
import com.jxc.common.util.Io;
import com.jxc.common.util.httpclient.request.Request;
import com.jxc.common.util.httpclient.response.Response;
import com.jxc.user_center.annotation.Login;


/**
 * 权限(Token)验证
 */
@Component
public class AuthorizationInterceptor extends HandlerInterceptorAdapter {

    

    @SuppressWarnings("unchecked")
	@Override
    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {
    	
    	System.out.println("preHandle");
    	
    	
    	//SessionConstants.USER_KEY
    	
    	Login annotation;
        if(handler instanceof HandlerMethod) {
        	System.out.println("case  11");
            annotation = ((HandlerMethod) handler).getMethodAnnotation(Login.class);
        }else{
        	System.out.println("case 22");
            return true;
        }
        
        if(annotation == null){
        	System.out.println("case 33");
            return true;
        }

        //从header中获取token
        String token = request.getHeader("token");
        //如果header中不存在token，则从参数中获取token
        if(StringUtils.isBlank(token)){
            token = request.getParameter("token");
        }

        //token为空
        if(StringUtils.isBlank(token)){
            throw new RRException("token不能为空");
        }
        
        try {
    		String responseTmp = checkToken(RedisConstantsForUser.CHECK_SESSION_URL,token);
    		
     		if(responseTmp != null && responseTmp.trim().length() != 0){				        			
    			JSONObject js = JSONObject.parseObject(responseTmp);
    			int  code = (int) js.get("code");
			    	//code不为1代表失败    code为1的时候默认成功   不作处理
			    if(Integer.valueOf(code) != 1){
			    	Map<String,Object> data = (Map<String, Object>) js.get("data");
			    	String msg = (String) data.get("msg");
					int error_code = (int)data.get("error_code");
					
					Io.preForOut(R.error(error_code + 200,msg),response);
		            return false;
			    }else {
			    	Map<String,Object> data = (Map<String, Object>) js.get("data");
			    	Map<String,Object> session = (Map<String,Object>) data.get("session");
			    	
			    	try {
			    		String userId = (String)session.get(SessionConstants.USER_KEY);
				    	if(userId != null ){        	
				        	request.setAttribute(SessionConstants.USER_KEY, userId);
				        }
				    	
				    	String roleType = (String)session.get(SessionConstants.ROLE_TYPE);
				    	if(roleType != null ){        
				    		request.setAttribute(SessionConstants.ROLE_TYPE, roleType);
				    	}
					} catch (Exception e) {
						Io.preForOut(R.error(1000,"鉴权中心返回结果异常"),response);
			            return false;
					}
			    	
				}  
    		}else{
    			Io.preForOut(R.error(1000,"鉴权中心没返回"),response);
	            return false;
    		}
		} catch (Exception e) {
			Io.preForOut(R.error(999,"鉴权中心异常"),response);
            return false;
			
		}
        
//        //查询token信息
//        Map<String,Object> condition = new HashMap<String, Object>();
//        condition.put("token", token);
//        List<TokenEntity> tokenList = tokenService.queryTokenListByCondition(condition);
//        
//        TokenEntity currentToken = null;
//        
//        if(tokenList != null && tokenList.size() != 0){
//        	if(tokenList.size() == 1){
//        		currentToken = tokenList.get(0);
//        		if(currentToken.getExpireTime().getTime() < System.currentTimeMillis()){
//        			 throw new RRException("token失效，请重新登录");
//        		}
//        	}else{
//        		throw new RRException("token存在异常，不能使用！");
//        	}
//        }else{
//        	throw new RRException("token失效，请重新登录");
//        }
//
//        //设置userId到request里，后续根据userId，获取用户信息
//        if(currentToken != null ){        	
//        	request.setAttribute(USER_KEY, currentToken.getUserId());
//        }
    	
        return true;
       
    }
    
    private static String checkToken(String url, String token) throws Exception {
		Request request = new Request(url).addUrlParam("token", token);
		Response response = HttpClientManager.getInstance().doRequest(request);

		return response.getResponseText();
	}
    
}
