package com.jxc.sub_account.interceptor;

import com.alibaba.fastjson.JSONObject;
import com.jxc.common.bean.R;
import com.jxc.common.constants.RedisConstantsForUser;
import com.jxc.common.constants.SessionConstants;
import com.jxc.common.util.HttpClientManager;
import com.jxc.common.util.IPAddressUtil;
import com.jxc.common.util.Io;
import com.jxc.common.util.httpclient.request.Request;
import com.jxc.common.util.httpclient.response.Response;
import org.springframework.stereotype.Component;
import org.springframework.web.servlet.HandlerInterceptor;
import org.springframework.web.servlet.ModelAndView;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.util.Map;

public class RoleInterceptor implements HandlerInterceptor{

    //在请求处理之前进行调用（Controller方法调用之前）
    @Override
    public boolean preHandle(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o) throws Exception {

        //从header中获取token
        String token = httpServletRequest.getHeader("token");

        try {
            String responseTmp = checkToken(RedisConstantsForUser.CHECK_SESSION_URL,token);

            if(responseTmp != null && responseTmp.trim().length() != 0){
                JSONObject js = JSONObject.parseObject(responseTmp);
                int  code = (int) js.get("code");
                //code不为1代表失败    code为1的时候默认成功   不作处理
                if(Integer.valueOf(code) != 1){
                    Map<String,Object> data = (Map<String, Object>) js.get("data");
                    String msg = (String) data.get("msg");
                    int error_code = (int)data.get("error_code");

                    Io.preForOut(R.error(error_code + 200,msg),httpServletResponse);
                    return false;
                }else {
                    Map<String,Object> data = (Map<String, Object>) js.get("data");
                    Map<String,Object> session = (Map<String,Object>) data.get("session");

                    try {
                        String userId = (String)session.get(SessionConstants.USER_KEY);
                        if(userId != null ){
                            httpServletRequest.setAttribute(SessionConstants.USER_KEY, userId);
                        }

                        String roleType = (String)session.get(SessionConstants.ROLE_TYPE);
                        if(roleType != null ){
                            httpServletRequest.setAttribute(SessionConstants.ROLE_TYPE, roleType);
                        }
                    } catch (Exception e) {
                        Io.preForOut(R.error(1000,"鉴权中心返回结果异常"),httpServletResponse);
                        return false;
                    }

                }
            }else{
                Io.preForOut(R.error(1000,"鉴权中心没返回"),httpServletResponse);
                return false;
            }
        } catch (Exception e) {
            Io.preForOut(R.error(999,"鉴权中心异常"),httpServletResponse);
            return false;

        }

        return false;
    }

    //请求处理之后进行调用，但是在视图被渲染之前（Controller方法调用之后）
    @Override
    public void postHandle(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, ModelAndView modelAndView) throws Exception {

    }

    //在整个请求结束之后被调用
    @Override
    public void afterCompletion(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e) throws Exception {

    }

    private static String checkToken(String url, String token) throws Exception {
        Request request = new Request(url).addUrlParam("token", token);
        Response response = HttpClientManager.getInstance().doRequest(request);

        return response.getResponseText();
    }



}
