package com.jxc.payment_center.service.impl;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.jxc.common.bean.R;
import com.jxc.common.constants.ConfirmStateConstants;
import com.jxc.common.constants.RedisConstantsForRegist;
import com.jxc.common.constants.RoleTyleConstants;
import com.jxc.common.util.RedisUtil;
import com.jxc.common.util.S;
import com.jxc.payment_center.dao.DriverDao;
import com.jxc.payment_center.dao.OwnerDao;
import com.jxc.payment_center.dao.UserDao;
import com.jxc.payment_center.entity.Driver;
import com.jxc.payment_center.entity.Owner;
import com.jxc.payment_center.entity.User;
import com.jxc.payment_center.service.OwnerService;

@Service("ownerService")
public class OwnerServiceImpl implements OwnerService {

	@Autowired
	private OwnerDao ownerDao;

	@Autowired
	private DriverDao driverDao;

	@Autowired
	private RedisUtil redisUtil;

	@Autowired
	private UserDao userDao;

	@Override
	public R getOwnerInfo(User user) {
		R r = R.ok();
		if (user != null) {
			Long userId = user.getUserId();
			Integer roleType = user.getRoleType();
			if (userId != null && roleType != null) {
				// 先看roleType
				if (roleType == 1) {
					// 根据userid查询用户信息 是否1个
					// 拿到用户信息 比对roleType
					Map<String, Object> condition = new HashMap<String, Object>();
					condition.put("userId", userId);
					// 查询手机号使用的用户
					List<User> userList = userDao.queryUserListByCondition(condition);
					// 如果已经有人使用
					if (userList != null && userList.size() != 0) {
						if (userList.size() == 1) {
							User currentUser = userList.get(0);
							String roleId = currentUser.getRoleId();
							// 查询用户信息
							if (!S.isEmpty(roleId)) {
								condition.put("roleId", roleId);
								List<Owner> ownerList = ownerDao.queryOwnerListByCondition(condition);
								if (ownerList != null && ownerList.size() != 0) {
									if (ownerList.size() == 1) {
										Owner owner = ownerList.get(0);
										Map<String, Object> res = new HashMap<String, Object>();
										res.put("owner", owner);
										r = R.ok(res);
									} else {
										r = R.error(5, "该用户绑定的角色信息存在多个");
									}
								} else {
									r = R.error(5, "该用户绑定的角色信息不存在");
								}
							} else {
								r = R.error(5, "该用户绑定的角色id异常");
							}
						} else {
							r = R.error(5, "该用户账号异常，存在多个相同");
						}
					} else {
						r = R.error(5, "该用户不存在");
					}
				} else {
					r = R.error(111, "用户角色与当前要求不服");
				}
			} else {
				r = R.error(111, "token获取的用户信息异常");
			}
		} else {
			r = R.error(111, "token获取的用户信息为空");
		}
		return r;
	}

	@Transactional(rollbackFor = Exception.class)
	@Override
	public R applyRole(User user, int roleType) throws Exception {
		R r = R.ok();

		String uuid = UUID.randomUUID().toString().replaceAll("-", "");

		if (roleType != RoleTyleConstants.OWNER_ROLE_TYPE 
				&& roleType != RoleTyleConstants.DRIVER_ROLE_TYPE) {
			return R.error(55, "选择的角色不合要求");
		}

		if (user != null) {
			Long userId = user.getUserId();
			Integer currentRoleType = user.getRoleType();
			if (userId != null && currentRoleType != null) {
				// 先看roleType
				if (currentRoleType == 0) {
					// 根据userid查询用户信息 是否1个
					// 拿到用户信息 比对roleType
					Map<String, Object> condition = new HashMap<String, Object>();
					condition.put("userId", userId);
					// 查询手机号使用的用户
					List<User> userList = userDao.queryUserListByCondition(condition);
					// 如果已经有人使用
					if (userList != null && userList.size() != 0) {

						if (userList.size() == 1) {
							User currUser = userList.get(0);
							String roleId = currUser.getRoleId();

							if (S.isEmpty(roleId)) {
								
								switch (roleType) {
								case RoleTyleConstants.OWNER_ROLE_TYPE:
									// 添加机主
									// 修改user
									// 处理token的缓存 反出来token
									r = dealOwner(user, uuid, userId);

									break;
								case RoleTyleConstants.DRIVER_ROLE_TYPE:
									// 添加司机
									// 修改user
									// 处理token的缓存 反出来token
									r = dealDriver(user, uuid, userId);

									break;
								default:
									return R.error(5, "选择的角色不合要求");
								}

							} else {
								r = R.error(5, "该用户账号异常，已有绑定的角色对象");
							}

						} else {
							r = R.error(5, "该用户账号异常，存在多个相同");
						}

					} else {
						r = R.error(5, "该用户不存在");
					}
				} else {
					r = R.error(111, "用户角色与当前要求不服");
				}
			} else {
				r = R.error(111, "token获取的用户信息异常");
			}
		} else {
			r = R.error(111, "token获取的用户信息为空");
		}
		return r;
	}

	private R dealDriver(User user, String uuid, Long userId) throws Exception {
		R r;
		Driver driver = new Driver();
		driver.setDriverId(userId);
		driver.setConfirmState(ConfirmStateConstants.CONFIRM_UNAUDITED);
		driverDao.insertDriverInfo(driver);

		user.setRoleId(String.valueOf(userId));
		user.setRoleType(RoleTyleConstants.OWNER_ROLE_TYPE);
		userDao.updateUser(user);

		String reidsKey = RedisConstantsForRegist.REDIS_TOKEN_LOGIN_PREFIX + uuid;
		redisUtil.hSet(reidsKey, "userId", String.valueOf(user.getUserId()));
		redisUtil.hSet(reidsKey, "roleType", RoleTyleConstants.OWNER_ROLE_TYPE + "");
		redisUtil.expire(reidsKey, RedisConstantsForRegist.TOKEN_AVAIL_TIME);
		Map<String, Object> res = new HashMap<String, Object>();
		res.put("token", uuid);
		r = R.ok(res);
		return r;
	}

	private R dealOwner(User user, String uuid, Long userId) throws Exception {
		R r;
		Owner owner = new Owner();
		owner.setOwnerId(userId);
		owner.setConfirmState(ConfirmStateConstants.CONFIRM_UNAUDITED);
		ownerDao.insertOwnerInfo(owner);

		user.setRoleId(String.valueOf(userId));
		user.setRoleType(RoleTyleConstants.OWNER_ROLE_TYPE);
		userDao.updateUser(user);

		String reidsKey = RedisConstantsForRegist.REDIS_TOKEN_LOGIN_PREFIX + uuid;
		redisUtil.hSet(reidsKey, "userId", String.valueOf(user.getUserId()));
		redisUtil.hSet(reidsKey, "roleType", RoleTyleConstants.OWNER_ROLE_TYPE + "");
		redisUtil.expire(reidsKey, RedisConstantsForRegist.TOKEN_AVAIL_TIME);
		Map<String, Object> res = new HashMap<String, Object>();
		res.put("token", uuid);
		r = R.ok(res);
		return r;
	}

	

}
