package com.jxc.register_center.service.impl;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import org.hibernate.validator.cfg.defs.EANDef;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.alibaba.fastjson.JSONObject;
import com.jxc.common.bean.R;
import com.jxc.common.constants.RedisConstantsForRegist;
import com.jxc.common.util.AccountValidatorUtil;
import com.jxc.common.util.ConfirmCodeUtil;
import com.jxc.common.util.DateUtils;
import com.jxc.common.util.HttpClientManager;
import com.jxc.common.util.RedisUtil;
import com.jxc.common.util.S;
import com.jxc.common.util.httpclient.request.Request;
import com.jxc.common.util.httpclient.response.Response;
import com.jxc.register_center.dao.ShortMsgRecordDao;
import com.jxc.register_center.dao.UserDao;
import com.jxc.register_center.entity.ShortMsgRecord;
import com.jxc.register_center.entity.User;
import com.jxc.register_center.service.LoginService;

@Service("loginService")
public class LoginServiceImpl implements LoginService {

	@Autowired
	private RedisUtil redisUtil;
	
	
	

	@Autowired
	private UserDao userDao;

	@Autowired
	private ShortMsgRecordDao shortMsgRecordDao;

	@SuppressWarnings("unchecked")
	@Override
	public R sendMsg(String phone) {
	  
		R r = R.ok();
		//记录缓存的信息条数
		int redisCount = 0;
		
		//先直接生成一个6位的验证码		
		String confirmCode = ConfirmCodeUtil.getNumberCode(6); 

		try {
			//参数空校验
			if(phone!=null && phone.trim().length() != 0){
				//TODO
				//是否进行加密解密   后续看情况处理
				
				//手机号格式校验
				if(AccountValidatorUtil.isMobile(phone)){
					//从redis中获取手机号发送count数
					if(redisUtil.hasKey(RedisConstantsForRegist.SHORT_CODE_COUNT+phone)){
						redisCount = Integer.valueOf(redisUtil.get(RedisConstantsForRegist.SHORT_CODE_COUNT+phone));	
						if(redisCount>=10){
							r = R.error(99, "您今天发送已经超过10条");
						}
					}
					Map<String,Object> condition = new HashMap<String,Object>();
					condition.put("phone", phone);
					
					//查询手机号使用的用户
					List<User> userList = userDao.queryUserListByCondition(condition);
					
					//如果已经有人使用
					if(userList != null && userList.size() != 0){
						r = R.error(5, "电话号码已经被注册");
					}else{
						//当前手机号无人使用
						//获取手机号当天发送短信的发送情况   （数量和当天最近一条情况）
						Date now = new Date();
						Date nowZero = DateUtils.getNowZero(now);
						Date nextZero = DateUtils.getNextZero(now);
						
						condition.put("beforeCreateTime", new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(nowZero));
				        condition.put("afterCreateTime", new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(nextZero));
				        
				        //根据手机号   日期  查询当天该手机的短信记录列表
				        List<ShortMsgRecord> msgList = shortMsgRecordDao.queryShortMsgRecordListByCondition(condition);
				        //count
				        
				        if(msgList != null && msgList.size() != 0){
				        	
				        	//有短信记录
				        	//拿到最新的短信记录    对时间进行校验
				        	if(redisCount <= msgList.size()){
				        		redisCount=msgList.size();
				        		redisUtil.set(RedisConstantsForRegist.SHORT_CODE_COUNT+phone,String.valueOf(msgList.size()));
				        	}
				        	
				        	//拿到数据库当天手机号发送短信进行校验
				        	if(msgList.size() >= 10){
				        		return R.error(888, "该手机号当日发送短信过多");
				        	}
				        	
				        	ShortMsgRecord a = msgList.get(0);//拿到的记录一定会有创建
				        	Date createTime = a.getCreateTime();
				        	
				        	//如果最近的一条在2分钟内
				        	if(System.currentTimeMillis() - createTime.getTime() < 60 * 1000 * RedisConstantsForRegist.LIMIT_TIME_OUT){
				        		r = R.error(6, "短信发送过于频繁");
				        	}else{
				        		//有发送记录，满足条数限制 ，超过2分钟   可以调用短信发送服务
				        		
				        		String response = sendMsg(RedisConstantsForRegist.SHORT_MESSAGE_URL,phone,1,1,120,confirmCode);
				        		
				        		if(response != null && response.trim().length() != 0){				        			
				        			JSONObject js = JSONObject.parseObject(response);
								    int  code = (int) js.get("code");
								    	//code不为1代表失败    
								    if(Integer.valueOf(code) != 1){
								    	Map<String,Object> data = (Map<String, Object>) js.get("data");
								    	String msg = (String) data.get("msg");
								    	int error_code = (int)data.get("data");
								    	r = R.error(error_code+100 , msg);
								    } else{
								    	//这里就是短信服务中心返回正确时，将生成的验证码存入缓存
								    	try {
								    		String reidsKey = RedisConstantsForRegist.REGISTER_CODE_PREFIX+phone;
									    	redisUtil.set(reidsKey,confirmCode);
									    	redisUtil.expire(reidsKey, RedisConstantsForRegist.REGISTER_CODE_EXPIRE);
									    	redisCount ++;
									    	redisUtil.set(RedisConstantsForRegist.SHORT_CODE_COUNT+phone,String.valueOf(redisCount));
										} catch (Exception e) {
//											e.printStackTrace();
											r = R.error(999, "redis保存短信验证码异常");
										}
								    }
				        		}else{
				        			r = R.error(22, "短信中心没返回");
				        		}
				        	}
				        }else{
				        	//没有短信记录，说明可以直接调用发送短信服务
				        	
				        	try {
				        		
				        		String response = sendMsg(RedisConstantsForRegist.SHORT_MESSAGE_URL,phone,1,1,120,confirmCode);
				        		
				        		if(response != null && response.trim().length() != 0){				        			
				        			JSONObject js = JSONObject.parseObject(response);
				        			int  code = (int) js.get("code");
								    	//code不为1代表失败    
								    if(Integer.valueOf(code) != 1){
								    	Map<String,Object> data = (Map<String, Object>) js.get("data");
								    	String msg = (String) data.get("msg");
										int error_code = (int)data.get("data");
										r = R.error(error_code+100 , msg);
								    }else{
								    	//这里就是短信服务中心返回正确时，将生成的验证码存入缓存
								    	try {
								    		String reidsKey = RedisConstantsForRegist.REGISTER_CODE_PREFIX + phone;
									    	redisUtil.set(reidsKey,confirmCode);
									    	redisUtil.expire(reidsKey, RedisConstantsForRegist.REGISTER_CODE_EXPIRE);
									    	redisCount ++;
									    	redisUtil.set(RedisConstantsForRegist.SHORT_CODE_COUNT + phone,String.valueOf(redisCount));
										} catch (Exception e) {
//											e.printStackTrace();
											r = R.error(999, "redis保存短信验证码异常");
										}
								    	
								    }  
				        		}else{
				        			r = R.error(22, "短信中心没返回");
				        		}
							} catch (Exception e) {
								r = R.error(999, "短信中心服务异常");
							}
				        }
					}    
				}else{
					r = R.error(2, "电话号码格式错误");
				}
				
			}else{
				r = R.error(111, "有参数为空");
			}		
		} catch (Exception e) {
			e.printStackTrace();
			r = R.error(7, "服务异常,请稍后重试");
		}
		return r;
	}
	
	
	private static String sendMsg(String url, String phone, int actionCode, int client, int expir,String confirmCode) throws Exception {
		Request request = new Request(url).addUrlParam("phone", phone).addUrlParam("actionCode", actionCode)
				.addUrlParam("client", client).addUrlParam("expir", expir).addUrlParam("confirmCode", confirmCode);
		Response response = HttpClientManager.getInstance().doRequest(request);

		return response.getResponseText();
	}

	//TODO
	//该main方法仅仅用于测试     提交的时候进行删除
	public static void main(String[] args) throws Exception {
//		System.out.println(sendMsg("http://127.0.0.1:8081/doSendShortMsg", "13437106113", 1, 1, 120));
		//System.out.println(sendMsg("http://localhost:8081/doSendShortMsg", "13437106113", 1, 1, 120),"646464");
		
		
	}

	@Transactional(rollbackFor=Exception.class)
	@Override
	public R register(String phone, String password, String code) throws Exception {
		
		R r = R.ok();
		
		String uuid = UUID.randomUUID().toString().replaceAll("-", "");
		int redisCount = 0;
		try {
			if(!S.isEmpty(phone) && !S.isEmpty(password) && !S.isEmpty(code)){
				//是否进行加密解密   后续看情况处理
				
				//校验密码
				if(password.length() < 6 || password.length() > 20){
					return R.error(5, "输入的密码过长或过短");
				}else{
					//正则校验密码    数字和字母混合
					if(!AccountValidatorUtil.isPassword(password)){
						return R.error(5, "输入的密码不合要求");
					}
				}
				if(code.length() == 6 ){
					if(!AccountValidatorUtil.isValCode(code)){
						return R.error(5, "校验码格式不合要求");
					}
				}else{
					return R.error(5, "校验码长度过长或过短");
				}
				
				
				if(AccountValidatorUtil.isMobile(phone)){
					//从redis中查看   手机当天短信发送情况   如果没有记录  要处理   后续完善
		        	//code校验  处理  
					try {
						redisCount = Integer.valueOf(redisUtil.get(RedisConstantsForRegist.SHORT_CODE_COUNT+phone));					
						String confirmCode = redisUtil.get(RedisConstantsForRegist.REGISTER_CODE_PREFIX+phone);
						
						if(redisCount > 10){
							return R.error(5, "该手机号当天验证码过多，登录失败");
						}
						
						if(!code.equals(confirmCode)){
							return R.error(5, "验证码不正确");
						}
					} catch (Exception e) {
						return R.error(5, "该手机号当天未发送短信验证码");
					}
					
					Map<String,Object> condition = new HashMap<String,Object>();
					condition.put("phone", phone);
					
					//查询手机号使用的用户
					List<User> userList = userDao.queryUserListByCondition(condition);
					
					//如果已经有人使用
					if(userList != null && userList.size() != 0){
						r = R.error(5, "电话号码已经被注册");
					}else{
						//当前手机号无人使用
						//获取手机号当天发送短信的发送情况   （数量和当天最近一条情况）
						Date now = new Date();
						Date nowZero = DateUtils.getNowZero(now);
						Date nextZero = DateUtils.getNextZero(now);
						
						condition.put("beforeCreateTime", new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(nowZero));
				        condition.put("afterCreateTime", new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(nextZero));
				        
				        //根据手机号   日期  查询当天该手机的短信记录列表
				        List<ShortMsgRecord> msgList = shortMsgRecordDao.queryShortMsgRecordListByCondition(condition);
				        
				        if(msgList != null && msgList.size() != 0){
				        	
				        	if(redisCount <= msgList.size()){
				        		redisCount = msgList.size();
				        		redisUtil.set(RedisConstantsForRegist.SHORT_CODE_COUNT+phone,String.valueOf(msgList.size()));
				        	}
				        	
				        	if(msgList.size() > 10){
				        		return R.error(888, "该手机号当日发送短信过多");
				        	}
				        	
				        	//有短信记录
				        	//拿到最新的短信记录    对时间进行校验
				        	ShortMsgRecord record = msgList.get(0);//拿到的记录一定会有创建
				        	Date createTime = record.getCreateTime();
				        	//如果最近的一条在10分钟内
				        	if(System.currentTimeMillis() - createTime.getTime() < 60 * 1000 * RedisConstantsForRegist.LIMIT_TIME){
				        		//创建用户     
				        		
				        		try {
				        			User user = new User();
					        		user.setPhone(phone);
					        		user.setPassword(password);
					        		userDao.insert(user);
					        		
					        		//插入用户后  通过phone反查用户   获取userId
					        		List<User> tmpUserList = userDao.queryUserListByCondition(condition);
					        		
					        		if(tmpUserList != null && tmpUserList.size() == 1){
					        			user = tmpUserList.get(0);
					        			//创建成功
						        		//生成token
						        		String reidsKey = RedisConstantsForRegist.REDIS_TOKEN_LOGIN_PREFIX + uuid;
						        		redisUtil.hSet(reidsKey, "userId", String.valueOf(user.getUserId()));
						        		redisUtil.hSet(reidsKey, "roleType", "0");
						        		redisUtil.expire(reidsKey, RedisConstantsForRegist.TOKEN_AVAIL_TIME);
						        		Map<String,Object> res = new HashMap<String,Object> ();
						        		res.put("token", uuid);
						        		r = R.ok(res);
					        			
					        		}else {
					        			r = R.error(222,"注册用户失败");
									}
					        		
								} catch (Exception e) {
									r = R.error(222,"注册用户失败");
									throw e;
								}
				        	}else{
				        		//如果最近的一条在10分钟外，验证码无效
				        		r = R.error(222, "该短信验证码已失效");
				        	}
				        	
				        }else{
				        	r = R.error(333, "改手机号当天没有发送过短信");
				        }
					}
					
				}else{
					r = R.error(2, "电话号码格式错误");
				}
			}else{
				r = R.error(111, "有参数为空");
			}
		} catch (Exception e) {
//			e.printStackTrace();
			r = R.error(7, "服务异常,请稍后重试");
		}
		
		return r;
	}

	@Override
	public R doLogin(String phone, String password) {
		R r = R.ok();
		String uuid = UUID.randomUUID().toString().replaceAll("-", "");
		try {
			if(!S.isEmpty(phone) && !S.isEmpty(password)){
				//TODO
				//是否进行加密解密   后续看情况处理
				
				//校验密码
				if(password.length() < 6 || password.length() > 20){
					return R.error(5, "输入的密码过长或过短");
				}else{
					//正则校验密码    数字和字母混合
					if(!AccountValidatorUtil.isPassword(password)){
						return R.error(5, "输入的密码不合要求");
					}
				}
				
				if(AccountValidatorUtil.isMobile(phone)){
					
					Map<String,Object> condition = new HashMap<String,Object>();
					condition.put("phone", phone);
					//查询手机号查询的用户
					List<User> userList = userDao.queryUserListByCondition(condition);
					
					//有用户
					if(userList != null && userList.size() != 0){
						if(userList.size() == 1){
							User user = userList.get(0);
							String password_tmp = user.getPassword();
							if(!S.isEmpty(password_tmp) && AccountValidatorUtil.isPassword(password_tmp)){
								if(password.equals(password_tmp)){
									//登录成功    生成token  后续完善   默认成功   r不做处理
									try {
										
						        		//生成token
						        		String reidsKey = RedisConstantsForRegist.REDIS_TOKEN_LOGIN_PREFIX+uuid;
						        		redisUtil.hSet(reidsKey, "userId", String.valueOf(user.getUserId()));
						        		redisUtil.hSet(reidsKey, "roleType", String.valueOf(user.getRoleType()));
						        		redisUtil.expire(reidsKey, RedisConstantsForRegist.TOKEN_AVAIL_TIME);
						        		
						        		Map<String,Object> res= new HashMap<String,Object>();
						        		res.put("token", uuid);
						        		r = R.ok(res);
						        		
									} catch (Exception e) {
										r = R.error(222,"token生成失败");
									}
									
									
								}else{
									r = R.error(2, "密码不正确");
								}
							}else{
								r = R.error(2, "该手机号对应的用户密码不正常");
							}
						}else{
							r = R.error(2, "该手机号对应多名用户");
						}
						
					}else{
						r = R.error(2, "该手机号未找到用户");
					}
					
				}else{
					r = R.error(2, "电话号码格式错误");
				}
				
			}else{
				r = R.error(111, "有参数为空");
			}
		} catch (Exception e) {
			e.printStackTrace();
			r = R.error(7, "服务异常,请稍后重试");
		}
		
		return r;
	}


	@Override
	public R checkPhone(String phone) {
		R r = R.ok();
		try {
			if(!S.isEmpty(phone)){
				//TODO
				//是否进行加密解密   后续看情况处理
				
				if(AccountValidatorUtil.isMobile(phone)){
					
					Map<String,Object> condition = new HashMap<String,Object>();
					condition.put("phone", phone);
					//查询手机号查询的用户
					List<User> userList = userDao.queryUserListByCondition(condition);
					
					//有用户
					if(userList != null && userList.size() != 0){
						r = R.error(2, "该手机号已使用");
					}
					//没人使用就是成功，默认成功不用处理
					
				}else{
					r = R.error(2, "电话号码格式错误");
				}
				
			}else{
				r = R.error(111, "有参数为空");
			}
		} catch (Exception e) {
			e.printStackTrace();
			r = R.error(7, "服务异常,请稍后重试");
		}
		
		return r;
	}


	@Override
	public R forgetResetPassword(String phone, String password, String code) {
		R r = R.ok();
		
		String uuid = UUID.randomUUID().toString().replaceAll("-", "");
		int redisCount = 0;
		try {
			if(!S.isEmpty(phone) && !S.isEmpty(password) && !S.isEmpty(code)){
				//是否进行加密解密   后续看情况处理
				
				//校验密码
				if(password.length() < 6 || password.length() > 20){
					return R.error(5, "输入的密码过长或过短");
				}else{
					//正则校验密码    数字和字母混合
					if(!AccountValidatorUtil.isPassword(password)){
						return R.error(5, "输入的密码不合要求");
					}
				}
				if(code.length() == 6 ){
					if(!AccountValidatorUtil.isValCode(code)){
						return R.error(5, "校验码格式不合要求");
					}
				}else{
					return R.error(5, "校验码长度过长或过短");
				}
				
				
				if(AccountValidatorUtil.isMobile(phone)){
					//从redis中查看   手机当天短信发送情况   如果没有记录  要处理   后续完善
		        	//code校验  处理  
					try {
						redisCount = Integer.valueOf(redisUtil.get(RedisConstantsForRegist.SHORT_CODE_COUNT+phone));					
						String confirmCode = redisUtil.get(RedisConstantsForRegist.REGISTER_CODE_PREFIX+phone);
						
						if(redisCount > 10){
							return R.error(5, "该手机号当天验证码过多，登录失败");
						}
						
						if(!code.equals(confirmCode)){
							return R.error(5, "验证码不正确");
						}
					} catch (Exception e) {
						return R.error(5, "该手机号当天未发送短信验证码");
					}
					
					Map<String,Object> condition = new HashMap<String,Object>();
					condition.put("phone", phone);
					
					//查询手机号使用的用户
					List<User> userList = userDao.queryUserListByCondition(condition);
					
					//如果已经有人使用
					if(userList != null && userList.size() != 0){
						if(userList.size() == 1){

							User user = userList.get(0);
							
							//当前手机号无人使用
							//获取手机号当天发送短信的发送情况   （数量和当天最近一条情况）
							Date now = new Date();
							Date nowZero = DateUtils.getNowZero(now);
							Date nextZero = DateUtils.getNextZero(now);
							
							condition.put("beforeCreateTime", new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(nowZero));
					        condition.put("afterCreateTime", new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(nextZero));
					        
					        //根据手机号   日期  查询当天该手机的短信记录列表
					        List<ShortMsgRecord> msgList = shortMsgRecordDao.queryShortMsgRecordListByCondition(condition);
					        
					        if(msgList != null && msgList.size() != 0){
					        	
					        	if(redisCount <= msgList.size()){
					        		redisCount = msgList.size();
					        		redisUtil.set(RedisConstantsForRegist.SHORT_CODE_COUNT+phone,String.valueOf(msgList.size()));
					        	}
					        	
					        	if(msgList.size() > 10){
					        		return R.error(888, "该手机号当日发送短信过多");
					        	}
					        	
					        	//有短信记录
					        	//拿到最新的短信记录    对时间进行校验
					        	ShortMsgRecord record = msgList.get(0);//拿到的记录一定会有创建
					        	Date createTime = record.getCreateTime();
					        	//如果最近的一条在10分钟内
					        	if(System.currentTimeMillis() - createTime.getTime() < 60 * 1000 * RedisConstantsForRegist.LIMIT_TIME){
					        		//创建用户     
					        		try {
						        		user.setPassword(password);
						        		userDao.updatePwd(user);
									} catch (Exception e) {
										r = R.error(222,"修改密码失败");
									}
					        	}else{
					        		//如果最近的一条在10分钟外，验证码无效
					        		r = R.error(222, "该短信验证码已失效");
					        	}
					        	
					        }else{
					        	r = R.error(333, "改手机号当天没有发送过短信");
					        }
						
							
							
							
						}else{
							r = R.error(2, "该手机号对应多名用户，账号异常");
						}
					}else{
						r = R.error(2, "该手机号并未注册用户");
					}
					
				}else{
					r = R.error(2, "电话号码格式错误");
				}
			}else{
				r = R.error(111, "有参数为空");
			}
		} catch (Exception e) {
//			e.printStackTrace();
			r = R.error(7, "服务异常,请稍后重试");
		}
		
		return r;
	}
	
	
}
